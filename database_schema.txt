-- Military Security Database Schema
-- Run this in pgAdmin Query Tool after creating the database and enabling pgvector

-- Enable pgvector extension
CREATE EXTENSION IF NOT EXISTS vector;

-- Create enum types for better data integrity
CREATE TYPE personnel_rank AS ENUM (
    'STUDENT', 'SOLDIER', 'CORPORAL', 'SERGEANT', 
    'LIEUTENANT', 'CAPTAIN', 'MAJOR', 'COLONEL', 'GENERAL'
);

CREATE TYPE access_level AS ENUM (
    'PUBLIC', 'RESTRICTED', 'CLASSIFIED', 'TOP_SECRET'
);

CREATE TYPE alert_severity AS ENUM (
    'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'
);

CREATE TYPE alert_status AS ENUM (
    'ACTIVE', 'ACKNOWLEDGED', 'RESOLVED', 'FALSE_POSITIVE'
);

-- Personnel Groups Table
CREATE TABLE personnel_groups (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    access_level access_level NOT NULL DEFAULT 'RESTRICTED',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Camera Zones Table
CREATE TABLE camera_zones (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    access_level access_level NOT NULL DEFAULT 'RESTRICTED',
    coordinates JSONB, -- For storing zone boundaries
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Personnel Table
CREATE TABLE personnel (
    id SERIAL PRIMARY KEY,
    personnel_id VARCHAR(50) UNIQUE NOT NULL, -- Military ID
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    rank personnel_rank NOT NULL,
    unit VARCHAR(100),
    email VARCHAR(255),
    phone VARCHAR(20),
    is_active BOOLEAN DEFAULT true,
    group_id INTEGER REFERENCES personnel_groups(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_seen TIMESTAMP
);

-- Face Encodings Table (stores the facial recognition vectors)
CREATE TABLE face_encodings (
    id SERIAL PRIMARY KEY,
    personnel_id INTEGER REFERENCES personnel(id) ON DELETE CASCADE,
    encoding_vector vector(512), -- 512-dimensional vector for face encoding
    confidence_score FLOAT DEFAULT 0.0,
    training_image_path VARCHAR(500),
    is_primary BOOLEAN DEFAULT false, -- Mark the best encoding for each person
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Group Access Permissions
CREATE TABLE group_zone_access (
    id SERIAL PRIMARY KEY,
    group_id INTEGER REFERENCES personnel_groups(id) ON DELETE CASCADE,
    zone_id INTEGER REFERENCES camera_zones(id) ON DELETE CASCADE,
    access_granted BOOLEAN DEFAULT true,
    time_restrictions JSONB, -- Store time-based access rules
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(group_id, zone_id)
);

-- Security Alerts Table
CREATE TABLE security_alerts (
    id SERIAL PRIMARY KEY,
    alert_type VARCHAR(100) NOT NULL,
    severity alert_severity NOT NULL,
    status alert_status DEFAULT 'ACTIVE',
    zone_id INTEGER REFERENCES camera_zones(id),
    personnel_id INTEGER REFERENCES personnel(id),
    description TEXT NOT NULL,
    additional_data JSONB, -- Store detection confidence, coordinates, etc.
    image_path VARCHAR(500),
    detected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    acknowledged_at TIMESTAMP,
    acknowledged_by INTEGER REFERENCES personnel(id),
    resolved_at TIMESTAMP,
    resolved_by INTEGER REFERENCES personnel(id),
    resolution_notes TEXT
);

-- Detection Logs (for audit trail)
CREATE TABLE detection_logs (
    id SERIAL PRIMARY KEY,
    zone_id INTEGER REFERENCES camera_zones(id),
    personnel_id INTEGER REFERENCES personnel(id),
    detection_type VARCHAR(50) NOT NULL, -- 'FACE', 'LICENSE_PLATE', 'BEHAVIOR'
    confidence_score FLOAT,
    detection_data JSONB,
    image_path VARCHAR(500),
    detected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- System Users (for web interface authentication)
CREATE TABLE system_users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    personnel_id INTEGER REFERENCES personnel(id),
    is_admin BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    last_login TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX idx_face_encodings_personnel ON face_encodings(personnel_id);
CREATE INDEX idx_face_encodings_vector ON face_encodings USING ivfflat (encoding_vector vector_cosine_ops);
CREATE INDEX idx_personnel_group ON personnel(group_id);
CREATE INDEX idx_alerts_status ON security_alerts(status);
CREATE INDEX idx_alerts_severity ON security_alerts(severity);
CREATE INDEX idx_alerts_detected_at ON security_alerts(detected_at);
CREATE INDEX idx_detection_logs_zone ON detection_logs(zone_id);
CREATE INDEX idx_detection_logs_detected_at ON detection_logs(detected_at);

-- Insert default data
INSERT INTO personnel_groups (name, description, access_level) VALUES
('Students', 'Military academy students', 'RESTRICTED'),
('Sergeants', 'Non-commissioned officers', 'RESTRICTED'),
('Officers', 'Commissioned officers', 'CLASSIFIED'),
('Administrators', 'System administrators', 'TOP_SECRET'),
('Visitors', 'External visitors', 'PUBLIC');

INSERT INTO camera_zones (name, description, access_level) VALUES
('Main Entrance', 'Primary facility entrance', 'PUBLIC'),
('Administrative Building', 'Administrative offices', 'RESTRICTED'),
('Armory', 'Weapons storage area', 'CLASSIFIED'),
('Student Dormitory', 'Student accommodation area', 'RESTRICTED'),
('Training Grounds', 'Military training area', 'RESTRICTED'),
('Command Center', 'Operations command center', 'TOP_SECRET'),
('Perimeter Fence', 'Facility perimeter monitoring', 'RESTRICTED'),
('Vehicle Depot', 'Military vehicle storage', 'CLASSIFIED');

-- Set up default access permissions
INSERT INTO group_zone_access (group_id, zone_id, access_granted) 
SELECT g.id, z.id, 
    CASE 
        WHEN g.name = 'Administrators' THEN true
        WHEN g.name = 'Officers' AND z.access_level IN ('PUBLIC', 'RESTRICTED', 'CLASSIFIED') THEN true
        WHEN g.name = 'Sergeants' AND z.access_level IN ('PUBLIC', 'RESTRICTED') THEN true
        WHEN g.name = 'Students' AND z.name IN ('Main Entrance', 'Student Dormitory', 'Training Grounds') THEN true
        WHEN g.name = 'Visitors' AND z.name = 'Main Entrance' THEN true
        ELSE false
    END
FROM personnel_groups g, camera_zones z;

-- Create a function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for automatic timestamp updates
CREATE TRIGGER update_personnel_updated_at BEFORE UPDATE ON personnel
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_face_encodings_updated_at BEFORE UPDATE ON face_encodings
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_personnel_groups_updated_at BEFORE UPDATE ON personnel_groups
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_camera_zones_updated_at BEFORE UPDATE ON camera_zones
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_system_users_updated_at BEFORE UPDATE ON system_users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Display success message
SELECT 'Database schema created successfully!' as status;